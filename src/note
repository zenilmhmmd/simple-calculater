-----------------------------------------------------------------
        REACT : Advanced frontent application Library
-----------------------------------------------------------------
1.  Basic REACT
    -React app is a collection of different libraries
    -React app consists of different 'components', which is used to display contents in browser, in react app, all the components are arranged in a tree structure. Tree structure has a single parent/root node which is by default knows as 'App Component'. Components are reusable.
    -Pure JavaScript fucntions to build components. It return how to display content in the browser. They are capable of doing only one task with the help of its arguments. Function without side-effects.
    -Declarative Approach 
    -Virtual DOM : Light weight memory represenntatiom of real DOM.
    -Babel Library : Used to display contents into browser
    JSX(JavaScript XML) : JS exntention for writing code in JavaScript, used to display contents in browser.
        -JSX Elements : 
            ex: consts heading=<h1>heading</h1>
        -Rules for using JSX
            -Every JSX elements must be inside a single tag. Parent tag can be any container tag(div, section, article...) or react fragments( <></> ) tag without name is known as react fragments.
            -In JSX we have to use camel case to write contents : eg: fontSize
            -Every JSX code must have a closing tag. 
                -If a tag has contents then: <starting-tag> content </ending-tag>
                -If a tag doesn't have contents: <starting-tag></ending-tag> or use self closing tag ( <starting-tag/> ) as well
                -Instead of attribute 'class' use 'className' in JSX
                -Instead of attribute 'for' use 'htmlFor' in JSX
                -In JSX, we can directly pass JS code inside curly braces. ex:{js code}
2.  React App Creation
    -CRA (Using create-react-app command)
    -Vite : Tool for building web application
        -Installing vite globally : npm i -g create-vite
        -React app creation using vite : npm create vite@latest reactAppName --
        --template react
3. File & Folder structure of react app using vite
    -package.json file : npm configuration file for the project
    -package-lock.json file : Used to hold version of dependent package of the project
    -eslint.config.js file : JS configuration files
    -.gitignore file : Used to hold file & folder to be ignored while adding to gitignore
    -node_modules folder : Used to locally store dependant packages of the project. We can generate node_modules folder with the help of command 'npm install'
    -public folder : Used to hold data that can be accessed by any part of the project.
    -index.html file : Entry point of react application. React app will display in index.html file
    -src folder : log of react app is defined here
        -main.jsx file : Used to render ( displaying in browser ) react app in html element with id as 'root'
        -createRoot() : Lets us create a root to display REACT components inside a browser DOM node
        -css file : Used to define style for all components in react app
        -App.jsx file : Used to create react root component
        -assets folder : Used to hold files used in react project
4. Components : Are a part of user interface. Used to display content in browser. to create component create a js/jsx file with filename start with capital letter
    -Components can be created in two types
        -Functional based components/stateless components : Uses JS pure functions to build components. Function name must be similar to its file name. Function must return JSX code.
        -Class based /state full components : Uses class to create component. Class inherit react component class. Render method in class used to return JSX.
        -To create state it has to call super method in its constructor to get its parent features. State is an object, where we can store values as key-value pairs, to update the state use a predefined method setState() pass its argument as updated value of state.
    -Life cycle methods of react components
        -Mounting phase : Putting JSX into DOM
            -constructer()
            -getDerivedStateFromProps()
            -render()
            -componentDidMount()
        -Updating phase : When component get updated
            -getDerivedStateFromProps()
            -getSnapshotBeforeUpdate()
            -shouldComponentUpdate()
            -render()
            -componentDidUpdate()
        -Unmounting phase : Removing component from DOM   
            -componentWillUnmount
    -Difference between class based vs fucntional based component
        Class Based Component                        Functional Based Component
    ---------------------------------------------------------------------------------
    1. Using Class to create,                    1. Using js pure fucntions and return jsx
    render method must return jsx
    2. Stateful component                        2. Stateless Component
    3. Hooks are not used                        3. Hooks are used
    4. Need constructer to initialize state      4. No need of constructer
    5. Life cycle methods are available          5. Life cycle methods are not available
5. Data sharing between React Components
    -Data can only be shared from parent to child : Use 'props' object
6. Props: Is a component which is an object used to transfer data from parent component to child component, parent data can be shared via child attribute. To access parent data in child we have to use props. Props is used in the child component function argument. Props cannot be changed.
7. COnditional rendering : Based on conditional rendering JSX elements in browser, using if-else statements(Ternary Operator ?:) / if statements (&& Operator)
8. List in React : Use map method. Set key attribute to duplicating JSX elements in a List
9. CSS styling in React : Different ways to apply css to JSX elements
    -Inline CSS : Using style attribute to apply style to JSX elements, style must be as a JS object
        -Syntax : style={{cssProperty:Value,...}}
    -External CSS : Define CSS style in an external file. Link css file to component file using import statements. We cannot import CSS file into a variable in component file.
        -import 'css file path'
    -CSS module file : File with extension as .module.css is known as css module file. In this we have to define style in class. To use module CSS file we have to import it to component file.
        -import variableName from 'module css file path', to apply style in component, variableName.className
10. Event handling in React : syntax- event={function call}
        -Binding functions without arguments : event={function-name}
        -Binding function with argument : event={()=>fucntionName(argument)}
        -Binding fucntion with arguments as event : event={(event)=>functionName(event)}
11. State in React : Used to store data of a component. When state value changes component will re-render.
12. Hooks in react : Predefined methods in React. Hooks are used to provide react component features to functional based component. To use a hook in a functional, it has to call the hook.
    -Rules to apply hooks in a component.
        -Import hook in component file.
        -To use hook in component call the hook in top level of component
        -Hooks cannot be conditional
    -Based on react features there are different types of hooks are available
        -Built-in hooks
            -useState(initial-value) hook : Used to create a state in functional component this hook will return an array of 2 arguments. First argument will be the state. Second argument is a function name used to update the state. State updating function name generally start with 'set'
            -useEffect(callBackFunction, dependency) hook : Used to apply side effects to the functional component. We can pass the side effect in its first argument as a call back function. We can also pass an optional dependancy argument to decide when to apply side effects in component.
                -dependancy different values
                    -No value : Side effect will apply to the component infinitely.
                    -Empty array : Side effect will aply to the component only at all time of loading the component in DOM.
                    -[state/props/variableName] : Side effects will apply to the component not only at the time of loading of the component in DOM but also whenever the value of state/props/varialbeName given in the dependancy changes
            -useRef(initialValue) : It is a React hook that lets you reference a value that's not needed for rendering. It's initial value is optional . it returns an object with current.
        -Custom hooks : Create a JS file to define a specific function for a specific task. Export the function from that file. Function name must start with 'use' keyword.


*npm create vite@latest interest-app -- --template react
14. Form Handling in React: Manage data inside the form by component
      - Controlled components : are components which form data inside its own state
      - Uncontrolled components :  components who acess form data using its  DOM  elements reference 